{"ast":null,"code":"var _jsxFileName = \"/home/abraham/Escritorio/NextJS/estados/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport \"./App.scss\";\nimport { Contador } from \"./Componentes/Contador/Contador\";\nimport { Form } from \"./Componentes/Form/Form\";\nimport { List } from \"./Componentes/List/list\";\n\n// recomendacion tener una interfaz donde cada propiedad sean los\n// posibles estados de ese componente.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// un array de objetos que entiendne el contrato de sub.\nconst INITIAL_STATE = [{\n  nick: \"Dylan Cafferatas\",\n  subMonths: 4,\n  avatar: \"https://i.pravatar.cc/250\",\n  description: \" Vivve en miami\"\n}, {\n  nick: \"Darko\",\n  subMonths: 5,\n  avatar: \"https://i.pravatar.cc/650\",\n  description: \"Vivve en la villa 1-11-14 \"\n}];\nfunction App() {\n  _s();\n  // <Array<Sub> > array de subs, o tambien  <Sub[]> como quieras.\n  const [subs, setSubs] = useState([]);\n  const [newSubNumber, setNewSubNumber] = useState(0);\n  const divRef = useRef(null); //arranca con null el div.\n\n  useEffect(() => {\n    setSubs(INITIAL_STATE);\n  }, []);\n  //Escucha otra manera en lguar de pasar setSubs pasar directamente el handle asi encapsular lo que vamos a hacer.\n  // aca por testing en lugar de enviar las entra침as que usamos, le enviamos mas masticado, util con los customHooks.\n  const handleNewSub = newSub => {\n    setSubs(subs => [...subs, newSub]);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: divRef,\n      children: [/*#__PURE__*/_jsxDEV(Contador, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Subs \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        subs: subs,\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"pepito Hola que onda \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onNewSub: handleNewSub\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"7npw9XtF3kJAIAcJOTj2jhWxFsw=\");\n_c = App;\nexport default App;\n/*\nEn resumen, useRef puede utilizarse tanto para establecer el enfoque en un elemento como\n para mantener una referencia a elementos mutables sin provocar una re-renderizaci칩n innecesaria.\n*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Contador","Form","List","jsxDEV","_jsxDEV","Fragment","_Fragment","INITIAL_STATE","nick","subMonths","avatar","description","App","_s","subs","setSubs","newSubNumber","setNewSubNumber","divRef","handleNewSub","newSub","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onNewSub","_c","$RefreshReg$"],"sources":["/home/abraham/Escritorio/NextJS/estados/src/App.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"./App.scss\";\nimport { Contador } from \"./Componentes/Contador/Contador\";\nimport { Form } from \"./Componentes/Form/Form\";\nimport { Sub } from \"./types\";\nimport { List } from \"./Componentes/List/list\";\n\n// recomendacion tener una interfaz donde cada propiedad sean los\n// posibles estados de ese componente.\n\ninterface AppState {\n  subs: Array<Sub>;\n  newSubNumber: number;\n}\n// un array de objetos que entiendne el contrato de sub.\nconst INITIAL_STATE = [\n  {\n    nick: \"Dylan Cafferatas\",\n    subMonths: 4,\n    avatar: \"https://i.pravatar.cc/250\",\n    description: \" Vivve en miami\",\n  },\n  {\n    nick: \"Darko\",\n    subMonths: 5,\n    avatar: \"https://i.pravatar.cc/650\",\n    description: \"Vivve en la villa 1-11-14 \",\n  },\n];\n\nfunction App() {\n  // <Array<Sub> > array de subs, o tambien  <Sub[]> como quieras.\n  const [subs, setSubs] = useState<AppState[\"subs\"]>([]);\n  const [newSubNumber, setNewSubNumber] = useState<AppState[\"newSubNumber\"]>(0);\n  const divRef = useRef<HTMLDivElement>(null); //arranca con null el div.\n\n  useEffect(() => {\n    setSubs(INITIAL_STATE);\n  }, []);\n  //Escucha otra manera en lguar de pasar setSubs pasar directamente el handle asi encapsular lo que vamos a hacer.\n  // aca por testing en lugar de enviar las entra침as que usamos, le enviamos mas masticado, util con los customHooks.\n  const handleNewSub = (newSub: Sub) => {\n    setSubs((subs) => [...subs, newSub]);\n  };\n\n  return (\n    <>\n      <div ref={divRef}>\n        <Contador />\n        <h1> Subs </h1>\n        <List subs={subs}>\n          {\" \"}\n          <h1>pepito Hola que onda </h1>{\" \"}\n        </List>\n        <Form onNewSub={handleNewSub} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n/*\nEn resumen, useRef puede utilizarse tanto para establecer el enfoque en un elemento como\n para mantener una referencia a elementos mutables sin provocar una re-renderizaci칩n innecesaria.\n*/\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAE1D,OAAO,WAAW;AAClB,OAAO,YAAY;AACnB,SAASC,QAAQ,QAAQ,iCAAiC;AAC1D,SAASC,IAAI,QAAQ,yBAAyB;AAE9C,SAASC,IAAI,QAAQ,yBAAyB;;AAE9C;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAMA;AACA,MAAMC,aAAa,GAAG,CACpB;EACEC,IAAI,EAAE,kBAAkB;EACxBC,SAAS,EAAE,CAAC;EACZC,MAAM,EAAE,2BAA2B;EACnCC,WAAW,EAAE;AACf,CAAC,EACD;EACEH,IAAI,EAAE,OAAO;EACbC,SAAS,EAAE,CAAC;EACZC,MAAM,EAAE,2BAA2B;EACnCC,WAAW,EAAE;AACf,CAAC,CACF;AAED,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAmB,EAAE,CAAC;EACtD,MAAM,CAACiB,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAA2B,CAAC,CAAC;EAC7E,MAAMmB,MAAM,GAAGpB,MAAM,CAAiB,IAAI,CAAC,CAAC,CAAC;;EAE7CD,SAAS,CAAC,MAAM;IACdkB,OAAO,CAACR,aAAa,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EACN;EACA;EACA,MAAMY,YAAY,GAAIC,MAAW,IAAK;IACpCL,OAAO,CAAED,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEM,MAAM,CAAC,CAAC;EACtC,CAAC;EAED,oBACEhB,OAAA,CAAAE,SAAA;IAAAe,QAAA,eACEjB,OAAA;MAAKkB,GAAG,EAAEJ,MAAO;MAAAG,QAAA,gBACfjB,OAAA,CAACJ,QAAQ;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACZtB,OAAA;QAAAiB,QAAA,EAAI;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACftB,OAAA,CAACF,IAAI;QAACY,IAAI,EAAEA,IAAK;QAAAO,QAAA,GACd,GAAG,eACJjB,OAAA;UAAAiB,QAAA,EAAI;QAAqB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EAAC,GAAG;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B,CAAC,eACPtB,OAAA,CAACH,IAAI;QAAC0B,QAAQ,EAAER;MAAa;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B;EAAC,gBACN,CAAC;AAEP;AAACb,EAAA,CA5BQD,GAAG;AAAAgB,EAAA,GAAHhB,GAAG;AA8BZ,eAAeA,GAAG;AAClB;AACA;AACA;AACA;AAHA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}