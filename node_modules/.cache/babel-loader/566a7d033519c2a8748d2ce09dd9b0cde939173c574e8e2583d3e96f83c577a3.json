{"ast":null,"code":"var _jsxFileName = \"/home/abraham/Escritorio/NextJS/estados/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport \"./App.scss\";\nimport { Contador } from \"./Componentes/Contador/Contador\";\nimport { Form } from \"./Componentes/Form/Form\";\nimport { List } from \"./Componentes/List/list\";\n\n// recomendacion tener una interfaz donde cada propiedad sean los\n// posibles estados de ese componente.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// un array de objetos que entiendne el contrato de sub.\n\nfunction App() {\n  _s();\n  // <Array<Sub> > array de subs, o tambien  <Sub[]> como quieras.\n  const [subs, setSubs] = useState([]);\n  const [newSubNumber, setNewSubNumber] = useState(0);\n  const divRef = useRef(null); //arranca con null el div.\n\n  useEffect(() => {}, []);\n  //Escucha otra manera en lguar de pasar setSubs pasar directamente el handle asi encapsular lo que vamos a hacer.\n  // aca por testing en lugar de enviar las entra침as que usamos, le enviamos mas masticado, util con los customHooks.\n  //Con el operador => se obtiene el valor de newSubNumber se realiza el calculo (n+1) y luego se\n  // devuelve el valor que se asigna a newSubNumber.\n  //Ademas los sub que devuelve el useState ya que son funciones asincronicas, no hay garantia\n  // que el valor se actualize de inmediato.\n  const handleNewSub = newSub => {\n    setSubs(subs => [...subs, newSub]);\n    setNewSubNumber(n => n + 1);\n  };\n  // Funciones como el set del useState, fetch, setTimeOut y setInterval son asincronicas.\n  // El useEffect lo usamos para hacer operaciones al momento de detecar que se cambia un valor\n  // (debido a que algunas funciones son asincronicas).\n  // El useEffect se ejecuta una vez al inicio del componente,\n  // se conoce como la ejecucion inicial o el montaje del componente.\n  // recordar que typescript realiza la validacion de tipos en tiempo de compilacion y no en tiempos\n  // de ejecucion por lo que no valida aspectos dinamicos o dependintes de datos ingresados en tiempo\n  // de ejecucion.\n  useEffect(() => {\n    fetch(\"https://abrahamosco.github.io/prueba.github.io/prueba.html\").then(res => res.json()).then(subs => {\n      console.log(newSubNumber);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: divRef,\n      children: [/*#__PURE__*/_jsxDEV(Contador, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Subs \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        subs: subs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" new Subs: \", newSubNumber, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onNewSub: handleNewSub\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"hCVvlO8YRfyUeJHZsfgs9gNCH6U=\");\n_c = App;\nexport default App;\n/*\nEn resumen, useRef puede utilizarse tanto para establecer el enfoque en un elemento como\n para mantener una referencia a elementos mutables sin provocar una re-renderizaci칩n innecesaria.\n*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Contador","Form","List","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","subs","setSubs","newSubNumber","setNewSubNumber","divRef","handleNewSub","newSub","n","fetch","then","res","json","console","log","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onNewSub","_c","$RefreshReg$"],"sources":["/home/abraham/Escritorio/NextJS/estados/src/App.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"./App.scss\";\nimport { Contador } from \"./Componentes/Contador/Contador\";\nimport { Form } from \"./Componentes/Form/Form\";\nimport { Sub } from \"./types\";\nimport { List } from \"./Componentes/List/list\";\n\n// recomendacion tener una interfaz donde cada propiedad sean los\n// posibles estados de ese componente.\n\ninterface AppState {\n  subs: Array<Sub>;\n  newSubNumber: number;\n}\n// un array de objetos que entiendne el contrato de sub.\n\nfunction App() {\n  // <Array<Sub> > array de subs, o tambien  <Sub[]> como quieras.\n  const [subs, setSubs] = useState<AppState[\"subs\"]>([]);\n  const [newSubNumber, setNewSubNumber] = useState<AppState[\"newSubNumber\"]>(0);\n  const divRef = useRef<HTMLDivElement>(null); //arranca con null el div.\n\n  useEffect(() => {}, []);\n  //Escucha otra manera en lguar de pasar setSubs pasar directamente el handle asi encapsular lo que vamos a hacer.\n  // aca por testing en lugar de enviar las entra침as que usamos, le enviamos mas masticado, util con los customHooks.\n  //Con el operador => se obtiene el valor de newSubNumber se realiza el calculo (n+1) y luego se\n  // devuelve el valor que se asigna a newSubNumber.\n  //Ademas los sub que devuelve el useState ya que son funciones asincronicas, no hay garantia\n  // que el valor se actualize de inmediato.\n  const handleNewSub = (newSub: Sub) => {\n    setSubs((subs) => [...subs, newSub]);\n    setNewSubNumber((n) => n + 1);\n  };\n  // Funciones como el set del useState, fetch, setTimeOut y setInterval son asincronicas.\n  // El useEffect lo usamos para hacer operaciones al momento de detecar que se cambia un valor\n  // (debido a que algunas funciones son asincronicas).\n  // El useEffect se ejecuta una vez al inicio del componente,\n  // se conoce como la ejecucion inicial o el montaje del componente.\n  // recordar que typescript realiza la validacion de tipos en tiempo de compilacion y no en tiempos\n  // de ejecucion por lo que no valida aspectos dinamicos o dependintes de datos ingresados en tiempo\n  // de ejecucion.\n  useEffect(() => {\n    fetch(\"https://abrahamosco.github.io/prueba.github.io/prueba.html\")\n      .then((res) => res.json())\n      .then((subs) => {\n        console.log(newSubNumber);\n      });\n  }, []);\n\n  return (\n    <>\n      <div ref={divRef}>\n        <Contador />\n        <h1> Subs </h1>\n        <List subs={subs} />\n        <h1> new Subs: {newSubNumber} </h1>\n        <Form onNewSub={handleNewSub} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n/*\nEn resumen, useRef puede utilizarse tanto para establecer el enfoque en un elemento como\n para mantener una referencia a elementos mutables sin provocar una re-renderizaci칩n innecesaria.\n*/\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAE1D,OAAO,WAAW;AAClB,OAAO,YAAY;AACnB,SAASC,QAAQ,QAAQ,iCAAiC;AAC1D,SAASC,IAAI,QAAQ,yBAAyB;AAE9C,SAASC,IAAI,QAAQ,yBAAyB;;AAE9C;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAMA;;AAEA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAmB,EAAE,CAAC;EACtD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAA2B,CAAC,CAAC;EAC7E,MAAMc,MAAM,GAAGf,MAAM,CAAiB,IAAI,CAAC,CAAC,CAAC;;EAE7CD,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC;EACvB;EACA;EACA;EACA;EACA;EACA;EACA,MAAMiB,YAAY,GAAIC,MAAW,IAAK;IACpCL,OAAO,CAAED,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEM,MAAM,CAAC,CAAC;IACpCH,eAAe,CAAEI,CAAC,IAAKA,CAAC,GAAG,CAAC,CAAC;EAC/B,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAnB,SAAS,CAAC,MAAM;IACdoB,KAAK,CAAC,4DAA4D,CAAC,CAChEC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAET,IAAI,IAAK;MACdY,OAAO,CAACC,GAAG,CAACX,YAAY,CAAC;IAC3B,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA,CAAAE,SAAA;IAAAiB,QAAA,eACEnB,OAAA;MAAKoB,GAAG,EAAEX,MAAO;MAAAU,QAAA,gBACfnB,OAAA,CAACJ,QAAQ;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACZxB,OAAA;QAAAmB,QAAA,EAAI;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACfxB,OAAA,CAACF,IAAI;QAACO,IAAI,EAAEA;MAAK;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACpBxB,OAAA;QAAAmB,QAAA,GAAI,aAAW,EAACZ,YAAY,EAAC,GAAC;MAAA;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnCxB,OAAA,CAACH,IAAI;QAAC4B,QAAQ,EAAEf;MAAa;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B;EAAC,gBACN,CAAC;AAEP;AAACpB,EAAA,CA5CQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AA8CZ,eAAeA,GAAG;AAClB;AACA;AACA;AACA;AAHA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}