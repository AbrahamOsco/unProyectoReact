{"ast":null,"code":"var _jsxFileName = \"/home/abraham/Escritorio/NextJS/estados/src/Componentes/Form/Form.tsx\",\n  _s = $RefreshSig$();\nimport \"./SForm.scss\";\nimport React, { useState } from \"react\";\n//en el useState vemos que inicializa en un bojeto que recibe un nick, submounth, avatar y descripcion\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// tambien podria ser :\n//export const Form = ({onNewSub}: FormProps) => {... }\nexport const Form = _ref => {\n  _s();\n  let {\n    onNewSub\n  } = _ref;\n  //me gustaria que el tipo de dato que ponemos dentro del useState(...)\n  // sea el correcto como abajo hago un setInputValues podria cambiar\n  // cosas y no se da cuenta.\n  const [inputValues, setInputValues] = useState({\n    nick: \"\",\n    subMonths: 0,\n    avatar: \"\",\n    description: \"\"\n  });\n\n  //\n  const handleSubmit = eve => {\n    eve.preventDefault();\n    // onNewSub aca es todos los elmentos del array de subs + el que agregamos ahora\n    //Este es el (callback (subs) => [...subs, inputValues]) que se le pasa como argumento al afucnion onNewSub.\n    // Callback es una funcion ( este caso es una funcion flecha ) que se le pasa como argumentoa otra funcion ( OnNewSub)\n    // en este caso la call back devuelve un array donde (al array de subs se le agrega el eleneto inputValues)\n    // finalmente se asignan los nuevos subs con la funcion onNewSub().\n    // con (...subs) estamos usando el operador spread para obtener todos los objetos Sub de nuestro array y luego\n    // Luego como estamos dentro de [...subs, inputValues ] colocamos todos los objetos de tipo sub que ya estaban en subs, y\n    // concadenamos con el inputValue (el nuevo objeto Sub) al ultimo y con operador [] creamos un nuevo array de la concatenacion de estos dos elementos.\n    // la funcion (subs) => [...subs, inputValues]  define una funcion de argumento subs que devuelve un nuevo array que combina los elementos subs.\n    // con el nuevo objeto de tipo Sub inputvalues. finalmente con la funcion onNewSub recibe el arrayDeSub y actualiza el arrays de subs original que esta\n    // en App.tsx -> estos comentarios pasaron a App.tsx en la funcion handleNewSub.\n    onNewSub(inputValues);\n    setInputValues({\n      nick: \"\",\n      subMonths: 0,\n      avatar: \"\",\n      description: \"\"\n    });\n  };\n  // se usa la propagacion de objetos y luego se usa el event target\n  // donde solo el event.target.name que cambia se actuliza su valor\n  // el resto queda igual.\n  //Resumen: Aca basicamente va actualizando en el inputValues el campo que va cambiando\n  // mentras el usuario teclea cambia inmediatamente, react vuelve a rendereizar esa componente\n  // y lo muestra el valor actualizado en la interfaz de usuario.\n  // en { ...inputValues, [event.target.name]: event.target.value } Aca basicamente se devuelve un objeto\n  // ese objeto es la fusion de ...inputValues (operador spread)\n  // que devuelve el array completo de inputValues-> [ nick:..., months:.., avatar:..., description:..., nick ]\n  // Luego se usa la sintaxis de corchete [] (Computed Property Names) para asignar dinamicamente el valor event.target.name\n  // una nueva propiedad al objeto por ej si en el campo \"nick\" escibimos una \"k\". En\n  // event.target.name = \"nick\" y event.target.value = \"k\" asi que en este caso no creamos una nueva\n  // propiedad si no que actualizamos el campo nick con el valor \"k\". Ademas con el operador ... y []\n  // se crea el nuevo objeto que pisa el inputValues anterior con los nuevos valores ingresados. en los campos\n  const handleCHange = event => {\n    setInputValues({\n      ...inputValues,\n      [event.target.name]: event.target.value\n    });\n  };\n  const handleClickClear = () => {\n    setInputValues({\n      nick: \"\",\n      subMonths: 0,\n      avatar: \"\",\n      description: \"\"\n    });\n  };\n\n  //Ojo que los atributo name de los input/textArea,etc deben coincidir con las\n  // propiedades de la interfaz Sub. Debido a que al capturar los cambios se asignaran correctamente\n  // a las propiedades correspondientes a la interfaz Sub.\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        id: \"formS\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: handleCHange,\n          value: inputValues.nick,\n          type: \"text\",\n          name: \"nick\",\n          placeholder: \"nick\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: handleCHange,\n          value: inputValues.subMonths,\n          type: \"text\",\n          name: \"subMonths\",\n          placeholder: \"subMonths\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: handleCHange,\n          value: inputValues.avatar,\n          type: \"text\",\n          name: \"avatar\",\n          placeholder: \"avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          onChange: handleCHange,\n          value: inputValues.description,\n          name: \"description\",\n          placeholder: \"descripcion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \" guardar nuevo suscriptor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleClickClear,\n          type: \"button\",\n          children: [\" \", \"clear\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Form, \"HmtEYt9EhU61KHWEqkHXxWlRkyQ=\");\n_c = Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Form","_ref","_s","onNewSub","inputValues","setInputValues","nick","subMonths","avatar","description","handleSubmit","eve","preventDefault","handleCHange","event","target","name","value","handleClickClear","children","onSubmit","id","onChange","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/abraham/Escritorio/NextJS/estados/src/Componentes/Form/Form.tsx"],"sourcesContent":["import { Sub } from \"../../types\";\nimport \"./SForm.scss\";\n\nimport React, { useState } from \"react\";\n//en el useState vemos que inicializa en un bojeto que recibe un nick, submounth, avatar y descripcion\ninterface FormState {\n  inputValues: Sub;\n}\n\ninterface FormProps {\n  onNewSub: (newSub: Sub) => void;\n  //onNewSub: React.Dispatch<React.SetStateAction<Sub[]>>;\n}\n// tambien podria ser :\n//export const Form = ({onNewSub}: FormProps) => {... }\nexport const Form: React.FC<FormProps> = ({ onNewSub }) => {\n  //me gustaria que el tipo de dato que ponemos dentro del useState(...)\n  // sea el correcto como abajo hago un setInputValues podria cambiar\n  // cosas y no se da cuenta.\n  const [inputValues, setInputValues] = useState<FormState[\"inputValues\"]>({\n    nick: \"\",\n    subMonths: 0,\n    avatar: \"\",\n    description: \"\",\n  });\n\n  //\n  const handleSubmit = (eve: React.FormEvent<HTMLFormElement>) => {\n    eve.preventDefault();\n    // onNewSub aca es todos los elmentos del array de subs + el que agregamos ahora\n    //Este es el (callback (subs) => [...subs, inputValues]) que se le pasa como argumento al afucnion onNewSub.\n    // Callback es una funcion ( este caso es una funcion flecha ) que se le pasa como argumentoa otra funcion ( OnNewSub)\n    // en este caso la call back devuelve un array donde (al array de subs se le agrega el eleneto inputValues)\n    // finalmente se asignan los nuevos subs con la funcion onNewSub().\n    // con (...subs) estamos usando el operador spread para obtener todos los objetos Sub de nuestro array y luego\n    // Luego como estamos dentro de [...subs, inputValues ] colocamos todos los objetos de tipo sub que ya estaban en subs, y\n    // concadenamos con el inputValue (el nuevo objeto Sub) al ultimo y con operador [] creamos un nuevo array de la concatenacion de estos dos elementos.\n    // la funcion (subs) => [...subs, inputValues]  define una funcion de argumento subs que devuelve un nuevo array que combina los elementos subs.\n    // con el nuevo objeto de tipo Sub inputvalues. finalmente con la funcion onNewSub recibe el arrayDeSub y actualiza el arrays de subs original que esta\n    // en App.tsx -> estos comentarios pasaron a App.tsx en la funcion handleNewSub.\n    onNewSub(inputValues);\n    setInputValues({\n      nick: \"\",\n      subMonths: 0,\n      avatar: \"\",\n      description: \"\",\n    });\n  };\n  // se usa la propagacion de objetos y luego se usa el event target\n  // donde solo el event.target.name que cambia se actuliza su valor\n  // el resto queda igual.\n  //Resumen: Aca basicamente va actualizando en el inputValues el campo que va cambiando\n  // mentras el usuario teclea cambia inmediatamente, react vuelve a rendereizar esa componente\n  // y lo muestra el valor actualizado en la interfaz de usuario.\n  // en { ...inputValues, [event.target.name]: event.target.value } Aca basicamente se devuelve un objeto\n  // ese objeto es la fusion de ...inputValues (operador spread)\n  // que devuelve el array completo de inputValues-> [ nick:..., months:.., avatar:..., description:..., nick ]\n  // Luego se usa la sintaxis de corchete [] (Computed Property Names) para asignar dinamicamente el valor event.target.name\n  // una nueva propiedad al objeto por ej si en el campo \"nick\" escibimos una \"k\". En\n  // event.target.name = \"nick\" y event.target.value = \"k\" asi que en este caso no creamos una nueva\n  // propiedad si no que actualizamos el campo nick con el valor \"k\". Ademas con el operador ... y []\n  // se crea el nuevo objeto que pisa el inputValues anterior con los nuevos valores ingresados. en los campos\n  const handleCHange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    setInputValues({ ...inputValues, [event.target.name]: event.target.value });\n  };\n\n  const handleClickClear = () => {\n    setInputValues({\n      nick: \"\",\n      subMonths: 0,\n      avatar: \"\",\n      description: \"\",\n    });\n  };\n\n  //Ojo que los atributo name de los input/textArea,etc deben coincidir con las\n  // propiedades de la interfaz Sub. Debido a que al capturar los cambios se asignaran correctamente\n  // a las propiedades correspondientes a la interfaz Sub.\n  return (\n    <>\n      <div>\n        <form onSubmit={handleSubmit} id=\"formS\">\n          <input\n            onChange={handleCHange}\n            value={inputValues.nick}\n            type=\"text\"\n            name=\"nick\"\n            placeholder=\"nick\"\n          />\n          <input\n            onChange={handleCHange}\n            value={inputValues.subMonths}\n            type=\"text\"\n            name=\"subMonths\"\n            placeholder=\"subMonths\"\n          />\n          <input\n            onChange={handleCHange}\n            value={inputValues.avatar}\n            type=\"text\"\n            name=\"avatar\"\n            placeholder=\"avatar\"\n          />\n          <textarea\n            onChange={handleCHange}\n            value={inputValues.description}\n            name=\"description\"\n            placeholder=\"descripcion\"\n          />\n          <button type=\"submit\"> guardar nuevo suscriptor</button>\n          <button onClick={handleClickClear} type=\"button\">\n            {\" \"}\n            clear\n          </button>\n        </form>\n      </div>\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}